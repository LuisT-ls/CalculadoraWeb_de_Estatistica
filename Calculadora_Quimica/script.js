function toggleDarkMode() {
  const body = document.body
  const button = document.getElementById('toggleDarkMode')

  const isDarkMode = body.classList.contains('dark-mode')

  if (isDarkMode) {
    body.classList.remove('dark-mode')
    button.textContent = 'üåô'
    button.classList.add('light-mode')
  } else {
    body.classList.add('dark-mode')
    button.textContent = '‚òÄÔ∏è'
    button.classList.remove('light-mode')
  }
}

document.addEventListener('DOMContentLoaded', function () {
  toggleDarkMode()
})

const operationSelect = document.getElementById('operation')
const inputFields = document.getElementById('input-fields')
const calculateButton = document.getElementById('calculate')
const resultDiv = document.getElementById('result')
const showExplanationButton = document.getElementById('showExplanation')
const explanationText = document.getElementById('calcExplanation')

operationSelect.addEventListener('change', () => {
  updateInputFields()
  showExplanation(operationSelect.value)
})

calculateButton.addEventListener('click', () => {
  try {
    calculateResult()
  } catch (error) {
    resultDiv.textContent = `Erro ao calcular: ${error.message}`
  }
})

showExplanationButton.addEventListener('click', () => {
  const selectedOperation = operationSelect.value
  showExplanation(selectedOperation)
  const explanation = explanationText
  if (
    explanation.style.display === 'none' ||
    explanation.style.display === ''
  ) {
    explanation.style.display = 'block'
  } else {
    explanation.style.display = 'none'
  }
})

function updateInputFields() {
  const selectedOperation = operationSelect.value
  const explanationsVisible = explanationText.style.display === 'block'
  inputFields.innerHTML = ''
  if (!explanationsVisible) {
    explanationText.style.display = 'none'
  }

  if (selectedOperation === 'conversaoUnidades') {
    addUnitSelector('unidadeOriginal', 'Unidade de Origem:', unitOptions)
    addUnitSelector('unidadeAlvo', 'Unidade de Destino:', unitOptions)
    addInputField('valorAConverter', 'Valor a Converter:')
  } else if (selectedOperation === 'calculosestequiometricos') {
    addInputField('quantidadeReagente', 'Quantidade de Reagente (mol):')
    addInputField('coeficienteReagente', 'Coeficiente Estequiom√©trico:')
  } else if (selectedOperation === 'massaMolar') {
    addInputField('massa', 'Massa (g):')
    addInputField('numeroMoles', 'N√∫mero de Moles:')
  } else if (selectedOperation === 'concentracaoSolucoes') {
    addInputField('quantidadeSoluto', 'Quantidade de Soluto (mol):')
    addInputField('volumeSolucao', 'Volume de Solu√ß√£o (L):')
  } else if (selectedOperation === 'diluicaoSolucoes') {
    addInputField('concentracaoInicial', 'Concentra√ß√£o Inicial (mol/L):')
    addInputField('volumeInicial', 'Volume Inicial (L):')
    addInputField('concentracaoFinal', 'Concentra√ß√£o Final (mol/L):')
  } else if (selectedOperation === 'reacoesQuimicas') {
    addInputField('molecularReagente1', 'Mol√©cula Reagente 1:')
    addInputField('molecularReagente2', 'Mol√©cula Reagente 2:')
    addInputField('molecularProduto1', 'Mol√©cula Produto 1:')
    addInputField('molecularProduto2', 'Mol√©cula Produto 2:')
  } else if (selectedOperation === 'balanceamentoEquacoes') {
    addInputField('equacaoDesbalanceada', 'Equa√ß√£o Desbalanceada:')
  } else if (selectedOperation === 'leiBoyleCharlesGayLussac') {
    addInputField('volumeInicial', 'Volume Inicial (L):')
    addInputField('pressaoInicial', 'Press√£o Inicial (atm):')
    addInputField('volumeFinal', 'Volume Final (L):')
    addInputField('pressaoFinal', 'Press√£o Final (atm):')
    addInputField('temperatura', 'Temperatura (K):')
  } else if (selectedOperation === 'solucoesTampao') {
    addInputField('acidoFraco', '√Åcido Fraco (mol/L):')
    addInputField('sal', 'Sal (mol/L):')
  } else if (selectedOperation === 'constantesQuimicas') {
    // N√£o s√£o necess√°rios campos de entrada para constantes qu√≠micas
  } else if (selectedOperation === 'temperaturaPressaoPadrao') {
    // N√£o s√£o necess√°rios campos de entrada para temperatura e press√£o padr√£o
  } else if (selectedOperation === 'equilibrioQuimico') {
    addInputField('coeficienteA', 'Coeficiente (A):')
    addInputField('coeficienteB', 'Coeficiente (B):')
    addInputField('coeficienteC', 'Coeficiente (C):')
    addInputField('coeficienteD', 'Coeficiente (D):')
  } else if (selectedOperation === 'leiLambertBeer') {
    addInputField('absorvancia', 'Absorv√¢ncia:')
    addInputField('comprimentoCaminho', 'Comprimento do Caminho √ìptico (cm):')
    addInputField('concentracao', 'Concentra√ß√£o (mol/L):')
  } else if (selectedOperation === 'cineticaQuimica') {
    addInputField('concentracaoA', 'Concentra√ß√£o (A) (mol/L):')
    addInputField('concentracaoB', 'Concentra√ß√£o (B) (mol/L):')
    addInputField('velocidade', 'Velocidade da Rea√ß√£o:')
  } else if (selectedOperation === 'equacaoNernst') {
    addInputField('potencialEletrodo', 'Potencial de Eletrodo (V):')
    addInputField('constanteEquilibrio', 'Constante de Equil√≠brio (Q):')
    addInputField('temperatura', 'Temperatura (K):')
  } else if (selectedOperation === 'constanteEquilibrioPressaoParcial') {
    addInputField('pressaoA', 'Press√£o Parcial (A) (atm):')
    addInputField('pressaoB', 'Press√£o Parcial (B) (atm):')
    addInputField('pressaoC', 'Press√£o Parcial (C) (atm):')
    addInputField('pressaoD', 'Press√£o Parcial (D) (atm):')
  } else if (selectedOperation === 'misturaGases') {
    addInputField('pressaoTotal', 'Press√£o Total (atm):')
    addInputField('fracaoMolar1', 'Fra√ß√£o Molar do G√°s 1:')
    addInputField('constanteGases', 'Constante dos Gases (atm L/(mol K):')
  } else if (selectedOperation === 'numeroOxidacao') {
    addInputField('composto', 'Composto:')
  } else if (selectedOperation === 'teoriaColisoes') {
    // N√£o s√£o necess√°rios campos de entrada para teoria de colis√µes
  } else if (selectedOperation === 'conversoesTemperatura') {
    addInputField('temperaturaCelsius', 'Temperatura (¬∞C):')
    addInputField('temperaturaFahrenheit', 'Temperatura (¬∞F):')
  } else if (selectedOperation === 'solucoesNaoIdeais') {
    addInputField('concentracaoReal', 'Concentra√ß√£o Real (mol/L):')
    addInputField('concentracaoIdeal', 'Concentra√ß√£o Ideal (mol/L):')
  } else if (selectedOperation === 'rendimentoReacao') {
    addInputField('quantidadeReal', 'Quantidade Real:')
    addInputField('quantidadeTeorica', 'Quantidade Te√≥rica:')
  } else if (selectedOperation === 'equacoesTermoquimicas') {
    addInputField('entalpia', 'Entalpia (kJ):')
    addInputField('temperaturaInicial', 'Temperatura Inicial (K):')
    addInputField('temperaturaFinal', 'Temperatura Final (K):')
    addInputField('quantidade', 'Quantidade (mol):')
  }
}

// Adicione esta fun√ß√£o para criar um seletor de unidade com as op√ß√µes fornecidas
function addUnitSelector(id, label, unitOptions) {
  const fieldDiv = document.createElement('div')
  fieldDiv.innerHTML = `
    <label for="${id}">${label}</label>
    <select id="${id}">
      ${unitOptions
        .map(option => `<option value="${option}">${option}</option>`)
        .join('')}
    </select>
  `
  inputFields.appendChild(fieldDiv)
}

// Adicione um array de op√ß√µes de unidade (isso pode ser personalizado)
const unitOptions = ['Litro', 'Mol', 'Grama', 'outraUnidade']

function convertUnits(value, fromUnit, toUnit) {
  if (fromUnit === 'Litro' && toUnit === 'Mol') {
    return value / chemicalConstants.volumeMolarPadrao
  } else if (fromUnit === 'Mol' && toUnit === 'Litro') {
    return value * chemicalConstants.volumeMolarPadrao
  } else if (fromUnit === 'Grama' && toUnit === 'Mol') {
    return value / chemicalConstants.avogadro
  } else if (fromUnit === 'Mol' && toUnit === 'Grama') {
    return value * chemicalConstants.avogadro
  } else {
    throw new Error('Convers√£o n√£o suportada para as unidades especificadas')
  }
}

function addInputField(id, label) {
  const fieldDiv = document.createElement('div')
  fieldDiv.innerHTML = `
    <label for="${id}">${label}</label>
    <input type="number" id="${id}">
  `
  inputFields.appendChild(fieldDiv)
}

// Adicione a base de dados de constantes qu√≠micas
const chemicalConstants = {
  avogadro: 6.022e23, // constante de Avogadro em mol^-1
  gasIdeal: 8.314 // constante dos gases ideais em J/(mol¬∑K)
  // Adicione outras constantes conforme necess√°rio
}

// Adicione uma fun√ß√£o para obter constantes qu√≠micas
function getChemicalConstant(constantName) {
  return chemicalConstants[constantName]
}

function equationOfReaction(inputs) {
  const reagente1 = inputs.molecularReagente1
  const reagente2 = inputs.molecularReagente2
  const produto1 = inputs.molecularProduto1
  const produto2 = inputs.molecularProduto2
  const equation = `${reagente1} + ${reagente2} ‚Üí ${produto1} + ${produto2}`

  return equation
}

function balanceChemicalEquation(inputs) {
  // Implementa√ß√£o da l√≥gica para balancear equa√ß√µes qu√≠micas
  let unbalancedEquation = inputs.equacaoDesbalanceada

  // L√≥gica para balancear a equa√ß√£o
  let balancedEquation = balanceEquation(unbalancedEquation)

  return balancedEquation
}

function calculateGasMixture(inputs) {
  // Adicione a l√≥gica de c√°lculo considerando inputs.pressaoParcial1 e inputs.pressaoParcial2
  const totalPressure = inputs.pressaoTotal
  const partialPressure1 = inputs.pressaoParcial1
  const partialPressure2 = inputs.pressaoParcial2
  const moleFraction1 = partialPressure1 / totalPressure
  const moleFraction2 = partialPressure2 / totalPressure

  return {
    moleFraction1,
    moleFraction2
  }
}

function calculateOxidationNumber(inputs) {
  const compound = inputs.composto
  const oxidationNumbers = getOxidationNumbers(compound)

  return oxidationNumbers
}

function calculateResult() {
  const selectedOperation = operationSelect.value
  const inputElements = inputFields.querySelectorAll('input')
  const inputs = {}

  inputElements.forEach(input => {
    inputs[input.id] = parseFloat(input.value)
  })

  let result

  switch (selectedOperation) {
    case 'conversaoUnidades':
      const originalUnit = inputs.unidadeOriginal
      const targetUnit = inputs.unidadeAlvo
      const originalValue = inputs.valorAConverter
      result = convertUnits(originalValue, originalUnit, targetUnit)
      break
    case 'calculosestequiometricos':
      result = inputs.quantidadeReagente * inputs.coeficienteReagente
      break
    case 'massaMolar':
      result = inputs.massa / inputs.numeroMoles
      break
    case 'concentracaoSolucoes':
      result = inputs.quantidadeSoluto / inputs.volumeSolucao
      break
    case 'diluicaoSolucoes':
      result =
        (inputs.concentracaoInicial * inputs.volumeInicial) /
        inputs.concentracaoFinal
      break
    case 'reacoesQuimicas':
      result = equationOfReaction(inputs)
      break
    case 'balanceamentoEquacoes':
      result = balanceChemicalEquation(inputs)
      break
    case 'leiBoyleCharlesGayLussac':
      if (inputs.temperatura2 > inputs.temperatura1) {
        result = inputs.pressao1 * (inputs.temperatura2 / inputs.temperatura1)
      } else {
        result = inputs.pressao1 * (inputs.temperatura1 / inputs.temperatura2)
      }
      break
    case 'solucoesTampao':
      result = inputs.pH // Assuming pH is already calculated in the input
      break
    case 'constantesQuimicas':
      result = getChemicalConstant('gasIdeal') * inputs.temperatura
      break
    case 'temperaturaPressaoPadrao':
      result =
        inputs.temperatura * (1 + 0.00366 * (inputs.altitude - inputs.nivelMar))
      break
    case 'equilibrioQuimico':
      const Kc =
        (inputs.coeficienteC * inputs.coeficienteD) /
        (inputs.coeficienteA * inputs.coeficienteB)
      result = Kc
      break
    case 'leiLambertBeer':
      result =
        (Math.log10(inputs.absorvancia) / inputs.comprimentoCaminho) *
        inputs.concentracao
      break
    case 'cineticaQuimica':
      result = inputs.velocidade // Assuming velocity is already calculated in the input
      break
    case 'equacaoNernst':
      result =
        inputs.potencialEletrodo -
        (0.0592 / inputs.numeroEletrons) *
          Math.log10(inputs.constanteEquilibrio)
      break
    case 'constanteEquilibrioPressaoParcial':
      result =
        (inputs.pressaoA * inputs.pressaoB) /
        (inputs.pressaoC * inputs.pressaoD)
      break
    case 'misturaGases':
      result =
        (inputs.pressaoTotal * inputs.fracaoMolar1) / inputs.constanteGases
      break
    case 'numeroOxidacao':
      throw new Error('Opera√ß√£o n√£o implementada: N√∫mero de Oxida√ß√£o')
      break
    case 'teoriaColisoes':
      result = inputs.constanteVelocidade * Math.pow(inputs.concentracao, 2)
      break
    case 'conversoesTemperatura':
      if (inputs.escala1 === 'C' && inputs.escala2 === 'F') {
        result = (inputs.temperaturaCelsius * 9) / 5 + 32
      } else if (inputs.escala1 === 'F' && inputs.escala2 === 'C') {
        result = ((inputs.temperaturaFahrenheit - 32) * 5) / 9
      }
      break
    case 'solucoesNaoIdeais':
      result = inputs.concentracaoReal / inputs.concentracaoIdeal
      break
    case 'rendimentoReacao':
      result = (inputs.quantidadeReal / inputs.quantidadeTeorica) * 100
      break
    case 'equacoesTermoquimicas':
      result = inputs.entalpia
      break
    default:
      throw new Error('Opera√ß√£o desconhecida')
  }

  result = Math.round(result * 100) / 100

  const resultDiv = document.getElementById('result')
  resultDiv.textContent = `Resultado: ${result}`
}

function formatCurrency(amount) {
  return amount.toLocaleString('pt-BR', {
    style: 'currency',
    currency: 'BRL',
    minimumFractionDigits: 2
  })
}

function showExplanation(selectedOperation) {
  let explanation = ''

  if (selectedOperation === 'conversaoUnidades') {
    explanation = `
      <p>A Convers√£o de Unidades Qu√≠micas permite a convers√£o entre diferentes unidades de medida usadas na qu√≠mica, como gramas para mol, litros para moles, etc.</p>
      <p>Exemplos:</p>
      <p>1. Gramas para Moles:</p>
      <p>   Mol = Gramas / Peso Molecular</p>
      <p>2. Litros para Moles (em condi√ß√µes padr√£o):</p>
      <p>   Moles = Litros / Volume Molar Padr√£o</p>
    `
  } else if (selectedOperation === 'calculosestequiometricos') {
    explanation = `
      <p>Os C√°lculos Estequiom√©tricos s√£o usados para determinar as quantidades de reagentes e produtos em uma rea√ß√£o qu√≠mica. As f√≥rmulas variam de acordo com o tipo de problema estequiom√©trico.</p>
      <p>Exemplo:</p>
      <p>Para a rea√ß√£o A + 2B ‚Üí C, se voc√™ tem 3 moles de A, calcule a quantidade de B necess√°ria.</p>
      <p>Usando a propor√ß√£o molar: 3 moles A * (2 moles B / 1 mole A) = 6 moles B</p>
    `
  } else if (selectedOperation === 'massaMolar') {
    explanation = `
      <p>A Massa Molar √© a massa de um mol de √°tomos de uma subst√¢ncia. A f√≥rmula √©:</p>
      <p>Massa Molar = Massa / N√∫mero de Moles</p>
      <p>Exemplo:</p>
      <p>Calcular a massa molar da √°gua (H2O):</p>
      <p>Massa Molar = (2 * Massa do H) + (1 * Massa do O)</p>
      <p>Massa Molar = (2 * 1) + (1 * 16) = 18 g/mol</p>
    `
  } else if (selectedOperation === 'concentracaoSolucoes') {
    explanation = `
      <p>A Concentra√ß√£o de Solu√ß√µes √© a quantidade de soluto presente em uma unidade de volume de solu√ß√£o. A f√≥rmula √©:</p>
      <p>Concentra√ß√£o = Quantidade de Soluto / Volume de Solu√ß√£o</p>
      <p>Exemplo:</p>
      <p>Preparar 500 mL de uma solu√ß√£o de NaCl com concentra√ß√£o de 0,2 mol/L:</p>
      <p>Quantidade de Soluto = 0,2 mol/L * 0,5 L = 0,1 mol</p>
    `
  } else if (selectedOperation === 'diluicaoSolucoes') {
    explanation = `
      <p>A Dilui√ß√£o de Solu√ß√µes √© o processo de adi√ß√£o de solvente para reduzir a concentra√ß√£o de uma solu√ß√£o. A f√≥rmula √©:</p>
      <p>Concentra√ß√£o Final = (Volume Inicial * Concentra√ß√£o Inicial) / Volume Final</p>
      <p>Exemplo:</p>
      <p>Diluir 100 mL de uma solu√ß√£o de HCl 2 mol/L para uma concentra√ß√£o de 0,5 mol/L:</p>
      <p>Concentra√ß√£o Final = (100 mL * 2 mol/L) / 500 mL = 0,4 mol/L</p>
    `
  } else if (selectedOperation === 'reacoesQuimicas') {
    explanation = `
      <p>As Rea√ß√µes Qu√≠micas descrevem a transforma√ß√£o de reagentes em produtos. As equa√ß√µes qu√≠micas representam essa transforma√ß√£o. Equacionar uma rea√ß√£o qu√≠mica √© fundamental para realizar c√°lculos estequiom√©tricos.</p>
      <p>Exemplo:</p>
      <p>Equacionar a rea√ß√£o de combust√£o do metano (CH4 + O2 ‚Üí CO2 + H2O)</p>
    `
  } else if (selectedOperation === 'balanceamentoEquacoesQuimicas') {
    explanation = `
      <p>O Balanceamento de Equa√ß√µes Qu√≠micas √© o processo de ajustar os coeficientes para garantir que o n√∫mero de √°tomos de cada elemento seja o mesmo nos reagentes e produtos.</p>
      <p>Exemplo:</p>
      <p>Balancear a equa√ß√£o: N2 + H2 ‚Üí NH3</p>
    `
  } else if (selectedOperation === 'leiBoyleCharlesGayLussac') {
    explanation = `
      <p>A Lei de Boyle, Charles e Gay-Lussac relaciona as vari√°veis de press√£o, volume e temperatura para um g√°s ideal.</p>
      <p>Para a Lei de Boyle: PV = constante (a temperatura constante)</p>
      <p>Para a Lei de Charles: V/T = constante (a press√£o constante)</p>
      <p>Para a Lei de Gay-Lussac: P/T = constante (o volume constante)</p>
    `
  } else if (selectedOperation === 'solucoesTampao') {
    explanation = `
      <p>As Solu√ß√µes Tamp√£o resistem a mudan√ßas significativas no pH quando pequenas quantidades de √°cido ou base s√£o adicionadas. S√£o compostas por um √°cido fraco e seu sal ou uma base fraca e seu sal.</p>
      <p>F√≥rmula geral do tamp√£o: √Åcido Fraco + Sal (ou Base Fraca + Sal)</p>
    `
  } else if (selectedOperation === 'constantesQuimicas') {
    explanation = `
      <p>As Constantes Qu√≠micas s√£o valores num√©ricos que descrevem propriedades espec√≠ficas dos materiais. Exemplos incluem a constante de Avogadro, a constante de Planck e a constante dos gases ideais (R).</p>
    `
  } else if (selectedOperation === 'temperaturaPressaoPadrao') {
    explanation = `
      <p>A Temperatura e Press√£o Padr√£o (TTP) s√£o condi√ß√µes espec√≠ficas usadas em c√°lculos estequiom√©tricos. O TTP padr√£o √© 0¬∞C (273,15 K) e 1 atm (101,325 kPa).</p>
    `
  } else if (selectedOperation === 'equilibrioQuimico') {
    explanation = `
      <p>O Equil√≠brio Qu√≠mico ocorre quando a taxa de forma√ß√£o dos produtos √© igual √† taxa de forma√ß√£o dos reagentes. A constante de equil√≠brio (Kc) √© usada para expressar essa rela√ß√£o.</p>
      <p>Exemplo:</p>
      <p>Equa√ß√£o qu√≠mica: aA + bB ‚áå cC + dD</p>
      <p>Express√£o para Kc: [C]^c[D]^d / [A]^a[B]^b</p>
    `
  } else if (selectedOperation === 'leiLambertBeer') {
    explanation = `
      <p>A Lei de Lambert-Beer relaciona a absorb√¢ncia (A), a concentra√ß√£o (c) e o comprimento do caminho √≥ptico (l) em uma medida de absor√ß√£o em espectrofotometria.</p>
      <p>F√≥rmula: A = Œµcl</p>
      <p>onde Œµ √© o coeficiente de extin√ß√£o molar.</p>
    `
  } else if (selectedOperation === 'cineticaQuimica') {
    explanation = `
      <p>A Cin√©tica Qu√≠mica estuda a velocidade das rea√ß√µes qu√≠micas. A velocidade m√©dia √© a varia√ß√£o da concentra√ß√£o de um reagente ou produto em rela√ß√£o ao tempo.</p>
      <p>Exemplo:</p>
      <p>Velocidade = Œî[A] / Œît</p>
    `
  } else if (selectedOperation === 'equacaoNernst') {
    explanation = `
      <p>A Equa√ß√£o de Nernst √© usada para calcular o potencial de eletrodo de uma c√©lula eletroqu√≠mica em n√£o condi√ß√µes padr√£o. Leva em considera√ß√£o a concentra√ß√£o dos √≠ons no eletrodo.</p>
      <p>Exemplo:</p>
      <p>Equa√ß√£o de Nernst: E = E¬∞ - (RT/nF) * ln(Q)</p>
      <p>onde E √© o potencial de eletrodo, E¬∞ √© o potencial padr√£o, R √© a constante dos gases ideais, T √© a temperatura, n √© o n√∫mero de el√©trons na rea√ß√£o, F √© a constante de Faraday e Q √© o quociente de rea√ß√£o.</p>
    `
  } else if (selectedOperation === 'constanteEquilibrioPressaoParcial') {
    explanation = `
      <p>A Constante de Equil√≠brio em Termos de Press√£o Parcial √© usada para expressar a rela√ß√£o entre as press√µes parciais dos reagentes e produtos em uma rea√ß√£o em equil√≠brio.</p>
      <p>Exemplo:</p>
      <p>Equa√ß√£o para Kp: Kp = (P_C^c * P_D^d) / (P_A^a * P_B^b)</p>
      <p>onde P_A, P_B, P_C e P_D s√£o as press√µes parciais dos reagentes e produtos, e a, b, c e d s√£o os coeficientes estequiom√©tricos na equa√ß√£o qu√≠mica.</p>
    `
  } else if (selectedOperation === 'misturaGases') {
    explanation = `
      <p>A Mistura de Gases envolve o c√°lculo das fra√ß√µes molares e das press√µes parciais de gases em uma mistura gasosa.</p>
      <p>Exemplo:</p>
      <p>Fra√ß√£o molar (Xi) = Ni / N_total</p>
      <p>Press√£o parcial (Pi) = Xi * Press√£o total</p>
    `
  } else if (selectedOperation === 'numeroOxidacao') {
    explanation = `
      <p>O N√∫mero de Oxida√ß√£o √© um n√∫mero que representa a carga que um √°tomo tem ou parece ter quando as liga√ß√µes s√£o consideradas de maneira i√¥nica.</p>
      <p>Exemplo:</p>
      <p>Para o √≠on Cl‚Åª, o n√∫mero de oxida√ß√£o do cloro √© -1.</p>
    `
  } else if (selectedOperation === 'teoriaColisoes') {
    explanation = `
      <p>A Teoria de Colis√µes explica como as colis√µes entre mol√©culas levam a rea√ß√µes qu√≠micas. A constante de velocidade (k) est√° relacionada √† frequ√™ncia e √† efic√°cia dessas colis√µes.</p>
      <p>Exemplo:</p>
      <p>Lei da velocidade: k = A * exp(-Ea/RT)</p>
      <p>onde A √© o fator de frequ√™ncia, Ea √© a energia de ativa√ß√£o, R √© a constante dos gases ideais e T √© a temperatura.</p>
    `
  } else if (selectedOperation === 'conversoesTemperatura') {
    explanation = `
      <p>As Convers√µes de Temperatura permitem converter entre diferentes escalas de temperatura, como Celsius e Fahrenheit.</p>
      <p>Exemplo:</p>
      <p>Converter 25¬∞C para Fahrenheit:</p>
      <p>F = (25 * 9/5) + 32 = 77¬∞F</p>
    `
  } else if (selectedOperation === 'solucoesNaoIdeais') {
    explanation = `
      <p>As Solu√ß√µes N√£o Ideais desviam-se do comportamento previsto pelas leis ideais. A atividade √© usada para corrigir os c√°lculos.</p>
      <p>Atividade = Concentra√ß√£o Real / Concentra√ß√£o Ideal</p>
    `
  } else if (selectedOperation === 'rendimentoReacao') {
    explanation = `
      <p>O Rendimento da Rea√ß√£o compara a quantidade real de produto obtido com a quantidade te√≥rica esperada. √â expresso como uma porcentagem.</p>
      <p>Rendimento (%) = (Quantidade Real / Quantidade Te√≥rica) * 100</p>
    `
  } else if (selectedOperation === 'equacoesTermoquimicas') {
    explanation = `
      <p>As Equa√ß√µes Termoqu√≠micas envolvem a varia√ß√£o de entalpia (ŒîH) em uma rea√ß√£o qu√≠mica. Pode ser endot√©rmica (ŒîH > 0) ou exot√©rmica (ŒîH < 0).</p>
      <p>Exemplo:</p>
      <p>ŒîH = Hprodutos - Hreagentes</p>
    `
  }

  explanationText.innerHTML = explanation
}

updateInputFields()
