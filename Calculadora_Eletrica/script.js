function toggleDarkMode() {
  const body = document.body
  const button = document.getElementById('toggleDarkMode')

  const isDarkMode = body.classList.contains('dark-mode')

  if (isDarkMode) {
    body.classList.remove('dark-mode')
    button.textContent = 'üåô'
    button.classList.add('light-mode')
  } else {
    body.classList.add('dark-mode')
    button.textContent = '‚òÄÔ∏è'
    button.classList.remove('light-mode')
  }
}

document.addEventListener('DOMContentLoaded', function () {
  toggleDarkMode()
})

const operationSelect = document.getElementById('operation')
const inputFields = document.getElementById('input-fields')
const calculateButton = document.getElementById('calculate')
const resultDiv = document.getElementById('result')
const showExplanationButton = document.getElementById('showExplanation')
const explanationText = document.getElementById('calcExplanation')

operationSelect.addEventListener('change', () => {
  updateInputFields()
})

calculateButton.addEventListener('click', () => {
  calculateResult()
})

showExplanationButton.addEventListener('click', () => {
  const selectedOperation = operationSelect.value
  showExplanation(selectedOperation)
  const explanation = explanationText // Use a refer√™ncia j√° existente
  if (
    explanation.style.display === 'none' ||
    explanation.style.display === ''
  ) {
    explanation.style.display = 'block'
  } else {
    explanation.style.display = 'none'
  }
})

operationSelect.addEventListener('change', () => {
  updateInputFields()
  showExplanation(operationSelect.value)
})

function updateInputFields() {
  const selectedOperation = operationSelect.value

  const explanationsVisible = explanationText.style.display === 'block'
  inputFields.innerHTML = ''
  if (!explanationsVisible) {
    explanationText.style.display = 'none'
  }

  switch (selectedOperation) {
    case 'lei-ohm':
      addInputField('voltagem', 'Voltagem (V):')
      addInputField('corrente', 'Corrente (A):')
      break
    case 'lei-ohm-reversa':
      addInputField('resistencia', 'Resist√™ncia (Œ©):')
      addInputField('corrente', 'Corrente (A):')
      break
    case 'potencia-eletrica':
      addInputField('voltagem', 'Voltagem (V):')
      addInputField('corrente', 'Corrente (A):')
      break
    case 'resistencia-serie':
      addInputField('resistencias', 'Resist√™ncias (Œ©) (separadas por v√≠rgula):')
      break
    case 'resistencia-paralelo':
      addInputField('resistencias', 'Resist√™ncias (Œ©) (separadas por v√≠rgula):')
      break
    case 'lkt':
      addInputField('tensoes', 'Tens√µes (V) (separadas por v√≠rgula):')
      break
    case 'lkc':
      addInputField('correntes', 'Correntes (A) (separadas por v√≠rgula):')
      break
    case 'capacitancia-serie':
      addInputField(
        'capacitancias',
        'Capacit√¢ncias (F) (separadas por v√≠rgula):'
      )
      break
    case 'capacitancia-paralelo':
      addInputField(
        'capacitancias',
        'Capacit√¢ncias (F) (separadas por v√≠rgula):'
      )
      break
    case 'lei-joule':
      addInputField('corrente', 'Corrente (A):')
      addInputField('resistencia', 'Resist√™ncia (Œ©):')
      addInputField('tempo', 'Tempo (s):')
      break
    case 'constante-tempo-rc':
      addInputField('resistencia', 'Resist√™ncia (Œ©):')
      addInputField('capacitancia', 'Capacit√¢ncia (F):')
      break
    case 'indutancia-serie':
      addInputField('indutancias', 'Indut√¢ncias (H) (separadas por v√≠rgula):')
      break
    case 'indutancia-paralelo':
      addInputField('indutancias', 'Indut√¢ncias (H) (separadas por v√≠rgula):')
      break
    case 'impedancia-curto-circuito':
      addInputField('resistencia', 'Resist√™ncia (Œ©):')
      addInputField('indutancia', 'Indut√¢ncia (H):')
      break
    case 'ajuste-transformadores':
      addInputField('potencia', 'Pot√™ncia (VA):')
      addInputField('tensaoPrimaria', 'Tens√£o Prim√°ria (V):')
      addInputField('tensaoSecundaria', 'Tens√£o Secund√°ria (V):')
      break
    case 'secao-transversal-condutores':
      addInputField('corrente', 'Corrente (A):')
      addInputField('comprimento', 'Comprimento (m):')
      addInputField('quedaTensao', 'Queda de Tens√£o (%):')
      break
    case 'corrente-curto-circuito':
      addInputField('impedancia', 'Imped√¢ncia (Œ©):')
      addInputField('tensao', 'Tens√£o (V):')
      break
    case 'queda-tensao-transmissao':
      addInputField('corrente', 'Corrente (A):')
      addInputField('resistencia', 'Resist√™ncia (Œ©):')
      addInputField('comprimento', 'Comprimento (m):')
      break
    case 'calculo-dimensionamento-condutores':
      addInputField('corrente', 'Corrente (A):')
      addInputField('comprimento', 'Comprimento (m):')
      addInputField('tipoCondutor', 'Tipo de Condutor:')
      break
    case 'calculo-fator-potencia':
      addInputField('potenciaAtiva', 'Pot√™ncia Ativa (W):')
      addInputField('potenciaReativa', 'Pot√™ncia Reativa (VAR):')
      break
    case 'calculo-potencia-trifasica':
      addInputField('tensao', 'Tens√£o (V):')
      addInputField('corrente', 'Corrente (A):')
      addInputField('fatorPotencia', 'Fator de Pot√™ncia:')
      break
    case 'calculo-ressonancia-circuitos-lc':
      addInputField('indutancia', 'Indut√¢ncia (H):')
      addInputField('capacitancia', 'Capacit√¢ncia (F):')
      break
    case 'compensacao-fator-potencia':
      addInputField('potenciaAparente', 'Pot√™ncia Aparente (VA):')
      addInputField('fatorPotenciaAtual', 'Fator de Pot√™ncia Atual:')
      addInputField('fatorPotenciaDesejado', 'Fator de Pot√™ncia Desejado:')
      break
    case 'dimensionamento-disjuntores-fusiveis':
      addInputField('corrente', 'Corrente (A):')
      addInputField('tensao', 'Tens√£o (V):')
      addInputField('tipoCarga', 'Tipo de Carga:')
      break
    case 'analise-harmonicos':
      addInputField(
        'correntesHarmonicas',
        'Correntes Harm√¥nicas (A) (separadas por v√≠rgula):'
      )
      break
    case 'calculo-perda-energia-linhas-transmissao':
      addInputField('corrente', 'Corrente (A):')
      addInputField('resistencia', 'Resist√™ncia (Œ©):')
      addInputField('comprimento', 'Comprimento (m):')
      break
    case 'calculo-iluminacao':
      addInputField('area', '√Årea (m¬≤):')
      addInputField('nivelIluminacao', 'N√≠vel de Ilumina√ß√£o (lux):')
      break
    case 'calculo-corrente-curto-circuito-disjuntores':
      addInputField('tensao', 'Tens√£o (V):')
      addInputField('impedancia', 'Imped√¢ncia (Œ©):')
      break
    case 'calculo-tensao-toque-passo-linhas-aereas':
      addInputField('correnteFuga', 'Corrente de Fuga (A):')
      addInputField('resistenciaSolo', 'Resist√™ncia do Solo (Œ©):')
      break
    case 'avaliacao-queda-tensao-linhas-distribuicao':
      addInputField('corrente', 'Corrente (A):')
      addInputField('resistencia', 'Resist√™ncia (Œ©):')
      addInputField('comprimento', 'Comprimento (m):')
      break
    case 'calculo-capacitores-correcao-fator-potencia':
      addInputField('potenciaReativa', 'Pot√™ncia Reativa (VAR):')
      addInputField('fatorPotenciaAtual', 'Fator de Pot√™ncia Atual:')
      addInputField('fatorPotenciaDesejado', 'Fator de Pot√™ncia Desejado:')
      break
    case 'calculo-temperatura-condutores':
      addInputField('corrente', 'Corrente (A):')
      addInputField('resistenciaTermica', 'Resist√™ncia T√©rmica (¬∞C/W):')
      break
    case 'determinacao-resistencia-equivalente-circuitos-paralelo':
      addInputField('resistencias', 'Resist√™ncias (Œ©) (separadas por v√≠rgula):')
      break
    case 'calculo-consumo-energia':
      addInputField('potencia', 'Pot√™ncia (W):')
      addInputField('tempo', 'Tempo de Uso (h):')
      break
    case 'calculo-perda-energia-motores':
      addInputField('potencia', 'Pot√™ncia (W):')
      addInputField('eficiencia', 'Efici√™ncia (%):')
      break
    case 'calculo-capacitancia-total-serie':
      addInputField(
        'capacitancias',
        'Capacit√¢ncias (F) (separadas por v√≠rgula):'
      )
      break
    case 'calculo-capacitancia-total-paralelo':
      addInputField(
        'capacitancias',
        'Capacit√¢ncias (F) (separadas por v√≠rgula):'
      )
      break
    case 'calculo-pico-corrente-circuitos-indutivos':
      addInputField('indutancia', 'Indut√¢ncia (H):')
      addInputField('tensao', 'Tens√£o (V):')
      break
    case 'calculo-corrente-curto-circuito':
      addInputField('tensao', 'Tens√£o (V):')
      addInputField('impedancia', 'Imped√¢ncia (Œ©):')
      break
    case 'queda-tensao-condutores':
      addInputField('corrente', 'Corrente (A):')
      addInputField('comprimento', 'Comprimento (m):')
      break
    case 'calculo-eficiencia-transformadores':
      addInputField('potenciaEntrada', 'Pot√™ncia de Entrada (W):')
      addInputField('potenciaSaida', 'Pot√™ncia de Sa√≠da (W):')
      break
    case 'calculo-autotransformadores':
      addInputField('potencia', 'Pot√™ncia (VA):')
      addInputField('tensaoPrimaria', 'Tens√£o Prim√°ria (V):')
      addInputField('tensaoSecundaria', 'Tens√£o Secund√°ria (V):')
      break
    case 'tempo-estabilizacao-controle':
      addInputField('tempoResposta', 'Tempo de Resposta (s):')
      addInputField('percentOvershoot', 'Percentual de Overshoot (%):')
      break
    case 'resistor-protecao-leds':
      addInputField('tensaoFonte', 'Tens√£o da Fonte (V):')
      addInputField('correnteLed', 'Corrente do LED (A):')
      addInputField('tensaoLed', 'Tens√£o do LED (V):')
      break
  }
}

function addInputField(id, label) {
  const inputField = document.createElement('div')
  inputField.className = 'input-field'
  inputField.innerHTML = `<label for="${id}">${label}</label><input type="number" id="${id}" />`
  inputFields.appendChild(inputField)
}

document
  .getElementById('operation')
  .addEventListener('change', updateInputFields)
updateInputFields() // Initialize input fields on page load

function calculateResult() {
  const selectedOperation = operationSelect.value
  let result = 0
  let formattedResult = ''

  const inputValues = {}
  document.querySelectorAll('.input-field input').forEach(input => {
    inputValues[input.id] = parseFloat(input.value)
  })

  switch (selectedOperation) {
    case 'lei-ohm':
      result = inputValues.voltagem / inputValues.corrente
      formattedResult = `Resultado (Resist√™ncia): ${result.toFixed(2)} Œ©`
      break
    case 'lei-ohm-reversa':
      result = inputValues.resistencia * inputValues.corrente
      formattedResult = `Resultado (Voltagem): ${result.toFixed(2)} V`
      break
    case 'potencia-eletrica':
      result = inputValues.voltagem * inputValues.corrente
      formattedResult = `Resultado (Pot√™ncia): ${result.toFixed(2)} W`
      break
    case 'resistencia-serie':
      const resistenciasSerie = inputValues.resistencias.split(',').map(Number)
      result = resistenciasSerie.reduce((total, r) => total + r, 0)
      formattedResult = `Resultado (Resist√™ncia Equivalente): ${result.toFixed(
        2
      )} Œ©`
      break
    case 'resistencia-paralelo':
      const resistenciasParalelo = inputValues.resistencias
        .split(',')
        .map(Number)
      result = 1 / resistenciasParalelo.reduce((total, r) => total + 1 / r, 0)
      formattedResult = `Resultado (Resist√™ncia Equivalente): ${result.toFixed(
        2
      )} Œ©`
      break
    case 'lkt':
      const tensoes = inputValues.tensoes.split(',').map(Number)
      result = tensoes.reduce((total, t) => total + t, 0)
      formattedResult = `Resultado (Soma das Tens√µes): ${result.toFixed(2)} V`
      break
    case 'lkc':
      const correntes = inputValues.correntes.split(',').map(Number)
      result = correntes.reduce((total, c) => total + c, 0)
      formattedResult = `Resultado (Soma das Correntes): ${result.toFixed(2)} A`
      break
    case 'capacitancia-serie':
      const capacitanciasSerie = inputValues.capacitancias
        .split(',')
        .map(Number)
      result = 1 / capacitanciasSerie.reduce((total, c) => total + 1 / c, 0)
      formattedResult = `Resultado (Capacit√¢ncia Equivalente): ${result.toFixed(
        2
      )} F`
      break
    case 'capacitancia-paralelo':
      const capacitanciasParalelo = inputValues.capacitancias
        .split(',')
        .map(Number)
      result = capacitanciasParalelo.reduce((total, c) => total + c, 0)
      formattedResult = `Resultado (Capacit√¢ncia Equivalente): ${result.toFixed(
        2
      )} F`
      break
    case 'lei-joule':
      result =
        Math.pow(inputValues.corrente, 2) *
        inputValues.resistencia *
        inputValues.tempo
      formattedResult = `Resultado (Energia Dissipada): ${result.toFixed(2)} J`
      break
    case 'constante-tempo-rc':
      result = inputValues.resistencia * inputValues.capacitancia
      formattedResult = `Resultado (Constante de Tempo): ${result.toFixed(2)} s`
      break
    case 'indutancia-serie':
      const indutanciasSerie = inputValues.indutancias.split(',').map(Number)
      result = indutanciasSerie.reduce((total, l) => total + l, 0)
      formattedResult = `Resultado (Indut√¢ncia Equivalente): ${result.toFixed(
        2
      )} H`
      break
    case 'indutancia-paralelo':
      const indutanciasParalelo = inputValues.indutancias.split(',').map(Number)
      result = 1 / indutanciasParalelo.reduce((total, l) => total + 1 / l, 0)
      formattedResult = `Resultado (Indut√¢ncia Equivalente): ${result.toFixed(
        2
      )} H`
      break
    case 'impedancia-curto-circuito':
      result = Math.sqrt(
        Math.pow(inputValues.resistencia, 2) +
          Math.pow(2 * Math.PI * 60 * inputValues.indutancia, 2)
      )
      formattedResult = `Resultado (Imped√¢ncia): ${result.toFixed(2)} Œ©`
      break
    case 'ajuste-transformadores':
      result =
        inputValues.potencia /
        (inputValues.tensaoSecundaria / inputValues.tensaoPrimaria)
      formattedResult = `Resultado (Ajuste): ${result.toFixed(2)} A`
      break
    case 'secao-transversal-condutores':
      result =
        (inputValues.corrente * inputValues.comprimento) /
        (inputValues.quedaTensao / 100)
      formattedResult = `Resultado (Se√ß√£o Transversal): ${result.toFixed(
        2
      )} mm¬≤`
      break
    case 'corrente-curto-circuito':
      result = inputValues.tensao / inputValues.impedancia
      formattedResult = `Resultado (Corrente de Curto-Circuito): ${result.toFixed(
        2
      )} A`
      break
    case 'queda-tensao-transmissao':
      result =
        inputValues.corrente * inputValues.resistencia * inputValues.comprimento
      formattedResult = `Resultado (Queda de Tens√£o): ${result.toFixed(2)} V`
      break
    case 'calculo-dimensionamento-condutores':
      result = (inputValues.corrente * inputValues.comprimento) / 56 // 56 is a constant for copper conductors
      formattedResult = `Resultado (Dimens√£o do Condutor): ${result.toFixed(
        2
      )} mm¬≤`
      break
    case 'calculo-fator-potencia':
      result =
        inputValues.potenciaAtiva /
        Math.sqrt(
          Math.pow(inputValues.potenciaAtiva, 2) +
            Math.pow(inputValues.potenciaReativa, 2)
        )
      formattedResult = `Resultado (Fator de Pot√™ncia): ${result.toFixed(2)}`
      break
    case 'calculo-potencia-trifasica':
      result =
        inputValues.tensao *
        inputValues.corrente *
        Math.sqrt(3) *
        inputValues.fatorPotencia
      formattedResult = `Resultado (Pot√™ncia Trif√°sica): ${result.toFixed(2)} W`
      break
    case 'calculo-ressonancia-circuitos-lc':
      result =
        1 /
        (2 *
          Math.PI *
          Math.sqrt(inputValues.indutancia * inputValues.capacitancia))
      formattedResult = `Resultado (Frequ√™ncia de Resson√¢ncia): ${result.toFixed(
        2
      )} Hz`
      break
    case 'compensacao-fator-potencia':
      const potenciaAtiva =
        inputValues.potenciaAparente * inputValues.fatorPotenciaAtual
      const potenciaReativaAtual = Math.sqrt(
        Math.pow(inputValues.potenciaAparente, 2) - Math.pow(potenciaAtiva, 2)
      )
      const potenciaReativaDesejada =
        potenciaAtiva * Math.tan(Math.acos(inputValues.fatorPotenciaDesejado))
      result = potenciaReativaAtual - potenciaReativaDesejada
      formattedResult = `Resultado (Compensa√ß√£o Necess√°ria): ${result.toFixed(
        2
      )} VAR`
      break
    case 'dimensionamento-disjuntores-fusiveis':
      result = inputValues.corrente * 1.25 // safety factor of 25%
      formattedResult = `Resultado (Corrente do Disjuntor/Fus√≠vel): ${result.toFixed(
        2
      )} A`
      break
    case 'analise-harmonicos':
      const correntesHarmonicas = inputValues.correntesHarmonicas
        .split(',')
        .map(Number)
      result = Math.sqrt(
        correntesHarmonicas.reduce((total, c) => total + Math.pow(c, 2), 0)
      )
      formattedResult = `Resultado (Corrente Harm√¥nica Total): ${result.toFixed(
        2
      )} A`
      break
    case 'calculo-perda-energia-linhas-transmissao':
      result =
        Math.pow(inputValues.corrente, 2) *
        inputValues.resistencia *
        inputValues.comprimento
      formattedResult = `Resultado (Perda de Energia): ${result.toFixed(2)} W`
      break
    case 'calculo-iluminacao':
      result = (inputValues.area * inputValues.nivelIluminacao) / 1000 // 1000 to convert lux to lumens
      formattedResult = `Resultado (Quantidade de L√¢mpadas): ${result.toFixed(
        2
      )} l√¢mpadas`
      break
    case 'calculo-corrente-curto-circuito-disjuntores':
      result = inputValues.tensao / inputValues.impedancia
      formattedResult = `Resultado (Corrente de Curto-Circuito): ${result.toFixed(
        2
      )} A`
      break
    case 'calculo-tensao-toque-passo-linhas-aereas':
      result = inputValues.correnteFuga * inputValues.resistenciaSolo
      formattedResult = `Resultado (Tens√£o de Toque/Passo): ${result.toFixed(
        2
      )} V`
      break
    case 'avaliacao-queda-tensao-linhas-distribuicao':
      result =
        inputValues.corrente * inputValues.resistencia * inputValues.comprimento
      formattedResult = `Resultado (Queda de Tens√£o): ${result.toFixed(2)} V`
      break
    case 'calculo-capacitores-correcao-fator-potencia':
      const potenciaAtivaFatorCorrecao =
        inputValues.potenciaAparente * inputValues.fatorPotenciaAtual
      const potenciaReativaAtualFatorCorrecao = Math.sqrt(
        Math.pow(inputValues.potenciaAparente, 2) -
          Math.pow(potenciaAtivaFatorCorrecao, 2)
      )
      const potenciaReativaDesejadaFatorCorrecao =
        potenciaAtivaFatorCorrecao *
        Math.tan(Math.acos(inputValues.fatorPotenciaDesejado))
      result =
        potenciaReativaAtualFatorCorrecao - potenciaReativaDesejadaFatorCorrecao
      formattedResult = `Resultado (Capacitor Necess√°rio): ${result.toFixed(
        2
      )} VAR`
      break
    case 'calculo-temperatura-condutores':
      result = (inputValues.corrente * inputValues.comprimento) / 58 // 58 is a constant for aluminum conductors
      formattedResult = `Resultado (Temperatura): ${result.toFixed(2)} ¬∞C`
      break
    case 'determinacao-resistencia-equivalente-circuitos-paralelo':
      const resistenciasEquivalenteParalelo = inputValues.resistencias
        .split(',')
        .map(Number)
      result =
        1 /
        resistenciasEquivalenteParalelo.reduce((total, r) => total + 1 / r, 0)
      formattedResult = `Resultado (Resist√™ncia Equivalente): ${result.toFixed(
        2
      )} Œ©`
      break
    case 'calculo-consumo-energia':
      result = (inputValues.potencia * inputValues.tempo) / 1000 // Convert W to kWh
      formattedResult = `Resultado (Consumo de Energia): ${result.toFixed(
        2
      )} kWh`
      break
    case 'calculo-perda-energia-motores':
      result = inputValues.potencia * (1 - inputValues.eficiencia / 100)
      formattedResult = `Resultado (Perda de Energia): ${result.toFixed(2)} W`
      break
    case 'calculo-capacitancia-total-serie':
      const capacitanciasTotalSerie = inputValues.capacitancias
        .split(',')
        .map(Number)
      result =
        1 / capacitanciasTotalSerie.reduce((total, c) => total + 1 / c, 0)
      formattedResult = `Resultado (Capacit√¢ncia Total): ${result.toFixed(2)} F`
      break
    case 'calculo-capacitancia-total-paralelo':
      const capacitanciasTotalParalelo = inputValues.capacitancias
        .split(',')
        .map(Number)
      result = capacitanciasTotalParalelo.reduce((total, c) => total + c, 0)
      formattedResult = `Resultado (Capacit√¢ncia Total): ${result.toFixed(2)} F`
      break
    case 'calculo-pico-corrente-circuitos-indutivos':
      result = inputValues.voltagem / inputValues.resistencia
      formattedResult = `Resultado (Pico de Corrente): ${result.toFixed(2)} A`
      break
    case 'queda-tensao-condutores':
      result = (inputValues.corrente * inputValues.comprimento) / 58 // 58 is a constant for aluminum conductors
      formattedResult = `Resultado (Queda de Tens√£o): ${result.toFixed(2)} V`
      break
    case 'calculo-eficiencia-transformadores':
      result = (inputValues.potenciaSaida / inputValues.potenciaEntrada) * 100
      formattedResult = `Resultado (Efici√™ncia): ${result.toFixed(2)}%`
      break
    case 'calculo-autotransformadores':
      result =
        inputValues.potencia *
        (inputValues.tensaoSecundaria / inputValues.tensaoPrimaria)
      formattedResult = `Resultado (Autotransformador): ${result.toFixed(2)} VA`
      break
    case 'tempo-estabilizacao-controle':
      result =
        -inputValues.tempoResposta /
        Math.log(inputValues.percentOvershoot / 100)
      formattedResult = `Resultado (Tempo de Estabiliza√ß√£o): ${result.toFixed(
        2
      )} s`
      break
    case 'resistor-protecao-leds':
      result =
        (inputValues.tensaoFonte - inputValues.tensaoLed) /
        inputValues.correnteLed
      formattedResult = `Resultado (Resistor): ${result.toFixed(2)} Œ©`
      break
    default:
      formattedResult = 'Opera√ß√£o n√£o suportada'
  }

  resultDiv.textContent = formattedResult
}

document.getElementById('calculate').addEventListener('click', calculateResult)

function showExplanation(selectedOperation) {
  let explanation = ''

  switch (selectedOperation) {
    case 'lei-ohm':
      explanation = `
        <p>A Lei de Ohm √© usada para determinar a rela√ß√£o entre voltagem, corrente e resist√™ncia em um circuito el√©trico. A f√≥rmula √©:</p>
        <p>Resist√™ncia (R) = Voltagem (V) / Corrente (I)</p>
      `
      break
    case 'lei-ohm-reversa':
      explanation = `
        <p>A Lei de Ohm reversa √© usada para calcular a voltagem em um circuito, dado a resist√™ncia e a corrente. A f√≥rmula √©:</p>
        <p>Voltagem (V) = Resist√™ncia (R) * Corrente (I)</p>
      `
      break
    case 'potencia-eletrica':
      explanation = `
        <p>O c√°lculo da pot√™ncia el√©trica √© usado para determinar a quantidade de energia consumida por um circuito. A f√≥rmula √©:</p>
        <p>Pot√™ncia (P) = Voltagem (V) * Corrente (I)</p>
      `
      break
    case 'resistencia-serie':
      explanation = `
        <p>O c√°lculo da resist√™ncia equivalente em s√©rie √© usado para determinar a resist√™ncia total em um circuito com resistores em s√©rie. A f√≥rmula √©:</p>
        <p>Resist√™ncia Equivalente (R) = R1 + R2 + ... + Rn</p>
      `
      break
    case 'resistencia-paralelo':
      explanation = `
        <p>O c√°lculo da resist√™ncia equivalente em paralelo √© usado para determinar a resist√™ncia total em um circuito com resistores em paralelo. A f√≥rmula √©:</p>
        <p>1 / Resist√™ncia Equivalente (R) = 1 / R1 + 1 / R2 + ... + 1 / Rn</p>
      `
      break
    case 'lkt':
      explanation = `
        <p>A Lei de Kirchhoff para tens√µes (LKT) afirma que a soma das tens√µes em qualquer malha fechada de um circuito √© igual a zero. A f√≥rmula √©:</p>
        <p>Soma das Tens√µes = V1 + V2 + ... + Vn = 0</p>
      `
      break
    case 'lkc':
      explanation = `
        <p>A Lei de Kirchhoff para correntes (LKC) afirma que a soma das correntes que entram em um n√≥ √© igual √† soma das correntes que saem desse n√≥. A f√≥rmula √©:</p>
        <p>Soma das Correntes = I1 + I2 + ... + In = 0</p>
      `
      break
    case 'capacitancia-serie':
      explanation = `
        <p>O c√°lculo da capacit√¢ncia equivalente em s√©rie √© usado para determinar a capacit√¢ncia total em um circuito com capacitores em s√©rie. A f√≥rmula √©:</p>
        <p>1 / Capacit√¢ncia Equivalente (C) = 1 / C1 + 1 / C2 + ... + 1 / Cn</p>
      `
      break
    case 'capacitancia-paralelo':
      explanation = `
        <p>O c√°lculo da capacit√¢ncia equivalente em paralelo √© usado para determinar a capacit√¢ncia total em um circuito com capacitores em paralelo. A f√≥rmula √©:</p>
        <p>Capacit√¢ncia Equivalente (C) = C1 + C2 + ... + Cn</p>
      `
      break
    case 'lei-joule':
      explanation = `
        <p>A Lei de Joule √© usada para calcular a energia dissipada em um resistor em forma de calor. A f√≥rmula √©:</p>
        <p>Energia Dissipada (E) = Corrente^2 (I^2) * Resist√™ncia (R) * Tempo (t)</p>
      `
      break
    case 'constante-tempo-rc':
      explanation = `
        <p>A constante de tempo de um circuito RC (resistor e capacitor) √© o tempo necess√°rio para que a tens√£o no capacitor atinja aproximadamente 63% do seu valor final ap√≥s uma mudan√ßa de tens√£o. A f√≥rmula √©:</p>
        <p>Constante de Tempo (œÑ) = Resist√™ncia (R) * Capacit√¢ncia (C)</p>
      `
      break
    case 'indutancia-serie':
      explanation = `
        <p>O c√°lculo da indut√¢ncia equivalente em s√©rie √© usado para determinar a indut√¢ncia total em um circuito com indutores em s√©rie. A f√≥rmula √©:</p>
        <p>Indut√¢ncia Equivalente (L) = L1 + L2 + ... + Ln</p>
      `
      break
    case 'indutancia-paralelo':
      explanation = `
        <p>O c√°lculo da indut√¢ncia equivalente em paralelo √© usado para determinar a indut√¢ncia total em um circuito com indutores em paralelo. A f√≥rmula √©:</p>
        <p>1 / Indut√¢ncia Equivalente (L) = 1 / L1 + 1 / L2 + ... + 1 / Ln</p>
      `
      break
    case 'impedancia-curto-circuito':
      explanation = `
        <p>O c√°lculo da imped√¢ncia de curto-circuito √© usado para determinar a imped√¢ncia total em um circuito durante um curto-circuito. A f√≥rmula √©:</p>
        <p>Imped√¢ncia (Z) = ‚àö(Resist√™ncia^2 (R^2) + (2œÄ * Frequ√™ncia (f) * Indut√¢ncia (L))^2)</p>
      `
      break
    case 'ajuste-transformadores':
      explanation = `
        <p>O ajuste de transformadores √© usado para calcular a corrente em um transformador baseado na pot√™ncia e na rela√ß√£o de tens√£o entre os enrolamentos prim√°rio e secund√°rio. A f√≥rmula √©:</p>
        <p>Corrente (I) = Pot√™ncia (P) / (Tens√£o Secund√°ria (Vs) / Tens√£o Prim√°ria (Vp))</p>
      `
      break
    case 'secao-transversal-condutores':
      explanation = `
        <p>O c√°lculo da se√ß√£o transversal de condutores √© usado para determinar a √°rea necess√°ria de um condutor el√©trico para transportar uma corrente espec√≠fica com uma queda de tens√£o permitida. A f√≥rmula √©:</p>
        <p>Se√ß√£o Transversal (A) = (Corrente (I) * Comprimento (L)) / (Queda de Tens√£o (ŒîV) / 100)</p>
      `
      break
    case 'corrente-curto-circuito':
      explanation = `
        <p>O c√°lculo da corrente de curto-circuito √© usado para determinar a corrente que flui em um circuito durante um curto-circuito. A f√≥rmula √©:</p>
        <p>Corrente de Curto-Circuito (Isc) = Tens√£o (V) / Imped√¢ncia (Z)</p>
      `
      break
    case 'queda-tensao-transmissao':
      explanation = `
        <p>O c√°lculo da queda de tens√£o em linhas de transmiss√£o √© usado para determinar a queda de tens√£o em um condutor devido √† resist√™ncia ao transportar corrente. A f√≥rmula √©:</p>
        <p>Queda de Tens√£o (ŒîV) = Corrente (I) * Resist√™ncia (R) * Comprimento (L)</p>
      `
      break
    case 'calculo-dimensionamento-condutores':
      explanation = `
        <p>O c√°lculo do dimensionamento de condutores √© usado para determinar a √°rea necess√°ria de um condutor para transportar uma corrente espec√≠fica com base em um fator de seguran√ßa. A f√≥rmula √©:</p>
        <p>Dimens√£o do Condutor (A) = Corrente (I) * Comprimento (L) / 56 (constante para condutores de cobre)</p>
      `
      break
    case 'calculo-fator-potencia':
      explanation = `
        <p>O c√°lculo do fator de pot√™ncia √© usado para determinar a rela√ß√£o entre a pot√™ncia ativa e a pot√™ncia aparente em um circuito. A f√≥rmula √©:</p>
        <p>Fator de Pot√™ncia (PF) = Pot√™ncia Ativa (P) / ‚àö(Pot√™ncia Ativa^2 (P^2) + Pot√™ncia Reativa^2 (Q^2))</p>
      `
      break
    case 'calculo-potencia-trifasica':
      explanation = `
        <p>O c√°lculo da pot√™ncia trif√°sica √© usado para determinar a pot√™ncia total em um sistema trif√°sico. A f√≥rmula √©:</p>
        <p>Pot√™ncia Trif√°sica (P) = Tens√£o (V) * Corrente (I) * ‚àö3 * Fator de Pot√™ncia (PF)</p>
      `
      break
    case 'calculo-ressonancia-circuitos-lc':
      explanation = `
        <p>O c√°lculo da frequ√™ncia de resson√¢ncia em circuitos LC √© usado para determinar a frequ√™ncia na qual a imped√¢ncia de um circuito LC √© m√≠nima. A f√≥rmula √©:</p>
        <p>Frequ√™ncia de Resson√¢ncia (f) = 1 / (2œÄ * ‚àö(Indut√¢ncia (L) * Capacit√¢ncia (C)))</p>
      `
      break
    case 'compensacao-fator-potencia':
      explanation = `
        <p>A compensa√ß√£o do fator de pot√™ncia √© usada para calcular a quantidade de capacit√¢ncia necess√°ria para corrigir o fator de pot√™ncia de um sistema el√©trico. A f√≥rmula √©:</p>
        <p>Capacit√¢ncia Necess√°ria (C) = Pot√™ncia Reativa (Q) / (2œÄ * Frequ√™ncia (f) * Tens√£o^2 (V^2))</p>
      `
      break
    case 'calculo-potencia-reativa':
      explanation = `
        <p>O c√°lculo da pot√™ncia reativa √© usado para determinar a pot√™ncia que oscila entre o gerador e o campo magn√©tico em um circuito AC. A f√≥rmula √©:</p>
        <p>Pot√™ncia Reativa (Q) = Tens√£o (V) * Corrente (I) * sen(œÜ)</p>
      `
      break
    case 'determinacao-capacidade-conducao-condutores':
      explanation = `
        <p>A determina√ß√£o da capacidade de condu√ß√£o dos condutores √© usada para calcular a corrente m√°xima que um condutor pode transportar sem sobreaquecer. A f√≥rmula √© baseada em normas e fatores de corre√ß√£o espec√≠ficos.</p>
      `
      break
    case 'corrente-rms-circuitos-ac':
      explanation = `
        <p>O c√°lculo da corrente RMS (Root Mean Square) em circuitos AC √© usado para determinar o valor eficaz da corrente. A f√≥rmula √©:</p>
        <p>Corrente RMS (Irms) = Corrente de Pico (Ipeak) / ‚àö2</p>
      `
      break
    case 'avaliacao-queda-tensao-linhas-distribuicao':
      explanation = `
        <p>A avalia√ß√£o da queda de tens√£o em linhas de distribui√ß√£o √© usada para determinar a queda de tens√£o ao longo de uma linha de transmiss√£o de energia el√©trica. A f√≥rmula √©:</p>
        <p>Queda de Tens√£o (ŒîV) = Corrente (I) * Resist√™ncia (R) * Comprimento (L)</p>
      `
      break
    case 'calculo-capacitores-correcao-fator-potencia':
      explanation = `
        <p>O c√°lculo dos capacitores para corre√ß√£o do fator de pot√™ncia √© usado para determinar a quantidade de capacit√¢ncia necess√°ria para melhorar o fator de pot√™ncia de um sistema. A f√≥rmula √©:</p>
        <p>Capacit√¢ncia Necess√°ria (C) = Pot√™ncia Reativa Atual (Q) * (1 - Fator de Pot√™ncia Atual / Fator de Pot√™ncia Desejado) / (2œÄ * Frequ√™ncia (f) * Tens√£o^2 (V^2))</p>
      `
      break
    case 'calculo-temperatura-condutores':
      explanation = `
        <p>O c√°lculo da temperatura dos condutores √© usado para determinar a temperatura de opera√ß√£o de um condutor com base na corrente e na resist√™ncia. A f√≥rmula √©:</p>
        <p>Temperatura (T) = Corrente (I) * Comprimento (L) / 58 (constante para condutores de alum√≠nio)</p>
      `
      break
    case 'determinacao-resistencia-equivalente-circuitos-paralelo':
      explanation = `
        <p>A determina√ß√£o da resist√™ncia equivalente em circuitos paralelo √© usada para calcular a resist√™ncia total de um circuito com resistores em paralelo. A f√≥rmula √©:</p>
        <p>1 / Resist√™ncia Equivalente (R) = 1 / R1 + 1 / R2 + ... + 1 / Rn</p>
      `
      break
    case 'calculo-consumo-energia':
      explanation = `
        <p>O c√°lculo do consumo de energia √© usado para determinar a quantidade de energia consumida por um dispositivo el√©trico ao longo do tempo. A f√≥rmula √©:</p>
        <p>Consumo de Energia (E) = Pot√™ncia (P) * Tempo (t) / 1000 (para converter W para kWh)</p>
      `
      break
    case 'calculo-perda-energia-motores':
      explanation = `
        <p>O c√°lculo da perda de energia em motores √© usado para determinar a quantidade de energia perdida devido √† inefici√™ncia de um motor. A f√≥rmula √©:</p>
        <p>Perda de Energia (P) = Pot√™ncia (P) * (1 - Efici√™ncia (Œ∑) / 100)</p>
      `
      break
    case 'calculo-capacitancia-total-serie':
      explanation = `
        <p>O c√°lculo da capacit√¢ncia total em s√©rie √© usado para determinar a capacit√¢ncia equivalente de capacitores conectados em s√©rie. A f√≥rmula √©:</p>
        <p>1 / Capacit√¢ncia Equivalente (C) = 1 / C1 + 1 / C2 + ... + 1 / Cn</p>
      `
      break
    case 'calculo-capacitancia-total-paralelo':
      explanation = `
        <p>O c√°lculo da capacit√¢ncia total em paralelo √© usado para determinar a capacit√¢ncia equivalente de capacitores conectados em paralelo. A f√≥rmula √©:</p>
        <p>Capacit√¢ncia Equivalente (C) = C1 + C2 + ... + Cn</p>
      `
      break
    case 'calculo-pico-corrente-circuitos-indutivos':
      explanation = `
        <p>O c√°lculo do pico de corrente em circuitos indutivos √© usado para determinar a corrente m√°xima em um circuito com um indutor. A f√≥rmula √©:</p>
        <p>Pico de Corrente (Ipeak) = Voltagem (V) / Resist√™ncia (R)</p>
      `
      break
    case 'queda-tensao-condutores':
      explanation = `
        <p>O c√°lculo da queda de tens√£o em condutores √© usado para determinar a queda de tens√£o ao longo de um condutor devido √† resist√™ncia ao transportar corrente. A f√≥rmula √©:</p>
        <p>Queda de Tens√£o (ŒîV) = Corrente (I) * Comprimento (L) / 58 (constante para condutores de alum√≠nio)</p>
      `
      break
    case 'calculo-eficiencia-transformadores':
      explanation = `
        <p>O c√°lculo da efici√™ncia de transformadores √© usado para determinar a efici√™ncia de um transformador ao converter energia. A f√≥rmula √©:</p>
        <p>Efici√™ncia (Œ∑) = (Pot√™ncia de Sa√≠da (Pout) / Pot√™ncia de Entrada (Pin)) * 100</p>
      `
      break
    case 'calculo-autotransformadores':
      explanation = `
        <p>O c√°lculo de autotransformadores √© usado para determinar a pot√™ncia em um autotransformador com base nas tens√µes prim√°ria e secund√°ria. A f√≥rmula √©:</p>
        <p>Autotransformador (VA) = Pot√™ncia (P) * (Tens√£o Secund√°ria (Vs) / Tens√£o Prim√°ria (Vp))</p>
      `
      break
    case 'tempo-estabilizacao-controle':
      explanation = `
        <p>O c√°lculo do tempo de estabiliza√ß√£o no controle √© usado para determinar o tempo necess√°rio para que uma vari√°vel de controle atinja um valor est√°vel ap√≥s uma mudan√ßa. A f√≥rmula √©:</p>
        <p>Tempo de Estabiliza√ß√£o (ts) = -Tempo de Resposta (tr) / ln(Percentual de Overshoot (OS) / 100)</p>
      `
      break
    case 'resistor-protecao-leds':
      explanation = `
        <p>O c√°lculo do resistor de prote√ß√£o para LEDs √© usado para determinar o valor do resistor necess√°rio para limitar a corrente atrav√©s de um LED. A f√≥rmula √©:</p>
        <p>Resistor (R) = (Tens√£o da Fonte (Vf) - Tens√£o do LED (Vled)) / Corrente do LED (Iled)</p>
      `
      break
    default:
      explanation = 'Opera√ß√£o n√£o suportada'
  }

  explanationText.innerHTML = explanation
}

document.getElementById('showExplanation').addEventListener('click', () => {
  const selectedOperation = operationSelect.value
  showExplanation(selectedOperation)
})
updateInputFields()
